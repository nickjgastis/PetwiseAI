// OLD PROMPT NOT BULLETED

// const prompt = `You are a highly experienced veterinarian. Based on the following input details, write a comprehensive veterinary prognosis report that adheres to the specified template. In each section, provide thorough elaboration, including additional medical insights, details on diagnosis, and treatment plans. If any inputs are missing from the top section (i.e., Patient Info), clearly state "Provide here" for those sections. For all other sections, either elaborate on the provided input or use best practices from similar cases to fill in gaps. Each answer you give must be at least three sentences long. Prescribe appropriate treatment plans with detailed dosages, medication names, and best practices to ensure a thorough and actionable report. ALWAYS PROVIDE A REPORT EVEN IF FIELDS ARE MISSING!!!

//     When creating headings, do not bold ANYTHING.
//     If there are capitalization errors, you will fix them.
    
//     Template:
//     Veterinary Report
    
//     Patient: ${inputs.patientName || "Provide here"}  
//     Species: ${inputs.species || "Provide here"}  
//     Sex: ${inputs.sex || "Provide here"}  
//     Breed: ${inputs.breed || "Provide here"}  
//     Color/Markings: ${inputs.colorMarkings || "Provide here"}  
//     Weight: ${inputs.weight || "Provide here"} ${inputs.weightUnit || "lbs"}  
//     Age: ${inputs.age || "Provide here"}  
//     Owner: ${inputs.ownerName || "Provide here"}  
//     Address: ${inputs.address || "Provide here"}  
//     Telephone: ${inputs.telephone || "Provide here"}  
//     ${getEnabledContent('examDate', `Exam Date: ${inputs.examDate || "Provide here"}`)}  
//     ${getEnabledContent('doctor', `Doctor: ${inputs.doctor || "Provide here"}`)}
    
//     ${getEnabledContent('presentingComplaint', `Presenting Complaint:\n${inputs.presentingComplaint || "Provide additional context on the presenting complaint, ifno input is provided, explain the complaint has yet to be discussed. Including how the owner first noticed the symptoms, how long they have persisted, and any relevant background information. If the symptoms worsen, explain potential complications and when further medical attention should be sought. Ensure the explanation is no shorter than three sentences."}`)}
    
//     ${getEnabledContent('history', `History:\n${inputs.history || "Provide a thorough history of the patient, including any previous medical issues, treatments, and notable changes in the patient's health or behavior. The history should be at least three sentences long."}`)}
    
//     ${getEnabledContent('physicalExamFindings', `Physical Exam Findings - ${new Date().toLocaleString()}\n${inputs.physicalExamFindings || "IMPORTANT: Keep the exact same structure and data that the input gives you at all times!!!. Do not give a paragraph. Compensate for capitalization errors, example: NORAML = normal. Here is an example: "}`)}
//     ${getEnabledContent('diagnosticTests', `Diagnostic Tests:\n${inputs.diagnosticTests || "Provide a comprehensive overview of both planned and completed diagnostic tests. Format as follows:\n1. For each test performed, provide:\n   - Test name/type\n   - Results in bullet points\n   - Interpretation of results\n2. For planned/recommended tests:\n   - List recommended tests\n   - Rationale for each test\n   - Expected diagnostic value\nEnsure all abnormal values are clearly highlighted and interpreted in the context of the patient's condition."}`)}
    
//     ${getEnabledContent('assessment', `Assessment:\n${inputs.assessment || "Provide a detailed and well-supported assessment of the patient's current condition, noting any trends or critical findings that guide the diagnosis and treatment. The assessment should be no shorter than three sentences."}`)}
    
//     ${getEnabledContent('diagnosis', `Diagnosis:\n${inputs.diagnosis || "Provide a detailed and well-supported diagnosis, explaining potential causes, complications, and how the condition may develop if left untreated. Mention any differential diagnoses and explain why this diagnosis was chosen. Comment on the prognosis and the expected progression of the condition. Each response should be at least three sentences long."}`)}
    
//     ${getEnabledContent('differentialDiagnosis', `Differential Diagnosis:\n${inputs.differentialDiagnosis || "Create numbered list of differential diagnosis in order of most likelyhood. Include potential differential diagnoses that were considered and explain why they were ruled out or considered less likely. Ensure the explanation is no less than three sentences."}`)}
    
//     Plan

//     ${getEnabledContent('treatment', `Treatment:\n${inputs.treatment || "List all the possible drugs that could be used, Example, 1. Drug name Dose (mg/kg) Route of admistration(IV, P.O, SQ), Frequency (SID, BID, TID, QID, EOD) Include number of days for treatment. Include medication names, specific dosages, routes of administration (e.g., oral, subcutaneous)."}`)}
//     Monitoring: 
//     Pull from the diagnosis section.. give bullet points on what to monitor for vets.

//     Medicine Interactions:
//     Based on the medications listed in the treatment plan above, provide a detailed analysis of:
//     1. Potential interactions between the prescribed medications
//     2. Common side effects for each medication
//     3. Any contraindications or special monitoring requirements
//     4. Specific drug-drug interactions that require attention
//     Ensure each explanation is thorough and at least three sentences long.
    
//     ${getEnabledContent('naturopathicMedicine', `Naturopathic Medicine:\n${inputs.naturopathicMedicine || "Based on the diagnosis and treatment plan outlined above, provide:\n1. Top 3 evidence - based natural treatments that would complement the conventional treatment plan\n2. Specific dosing recommendations and administration guidelines for each natural treatment\n3. Potential interactions between these natural treatments and the prescribed medications\n4. Expected benefits and any contraindications\nEach recommendation should be at least three sentences long and include scientific rationale."}`)}
    
//     ${getEnabledContent('clientCommunications', `Client Communications/Recommendations:\n${inputs.clientCommunications || "Write a message to the owner. Explain any potential side effects that may occur from treatment in detail to the owner. Summarize all the key points communicated with the owner, including diagnosis, treatment options, and any follow-up steps. Mention any key questions or concerns raised by the client. It should be a message directed at the owner. Each section should be no shorter than three sentences."}`)}
    
//     ${getEnabledContent('planFollowUp', `Plan/Follow-Up:\n${inputs.planFollowUp || "Provide clear and actionable follow-up instructions. Recommend when the next check-up should be, which signs of improvement or deterioration to watch for, and any necessary adjustments to care (e.g., diet changes, exercise restrictions). Suggest when and how the owner should re-engage for further treatment or tests. Each follow-up plan should be no shorter than three sentences."}`)}
    
//     ${getEnabledContent('doctor', inputs.doctor || "Provide here")}
    
//     End of Medical Record.
    
//     If any information is missing or incomplete, fill in with best practices from similar cases. Always ensure the report is detailed and medically accurate, providing the owner with a clear understanding of the pet's condition, prognosis, and next steps for care. Recommend appropriate treatments where relevant. If the input is short such as (vomiting for three days) you should expand with two to three sentences. Don't ever leave a comment at the end of the report.`;





    







    // import React, { useState, useEffect } from 'react';
    // import { useAuth0 } from "@auth0/auth0-react";
    // import { supabase } from '../supabaseClient';
    // import '../styles/Templates.css';
    // import { FaTimes, FaEdit, FaPlus } from 'react-icons/fa';
    // import { pdf } from '@react-pdf/renderer';
    // import { Document, Page, Text, StyleSheet } from '@react-pdf/renderer';
    // import { createEditor, Node, Transforms, Editor } from 'slate';
    // import { Slate, Editable, withReact } from 'slate-react';
    // import { withHistory } from 'slate-history';
    
    // const PDFDocument = ({ templateText }) => {
    //     const styles = StyleSheet.create({
    //         page: {
    //             padding: 40,
    //             fontSize: 12,
    //             fontFamily: 'Helvetica',
    //             lineHeight: 1.5
    //         },
    //         text: {
    //             marginBottom: 4,
    //             whiteSpace: 'pre-wrap',
    //             fontFamily: 'Helvetica'
    //         },
    //         headerText: {
    //             marginBottom: 8,
    //             marginTop: 16,
    //             fontFamily: 'Helvetica'
    //         },
    //         sectionBreak: {
    //             marginTop: 25
    //         }
    //     });
    
    //     const formatText = (text) => {
    //         const lines = text.split('\n');
    //         let components = [];
    //         let prevWasEmpty = false;
    
    //         lines.forEach((line, index) => {
    //             let trimmedLine = line.trim();
    
    //             // Handle empty lines for section breaks
    //             if (!trimmedLine) {
    //                 prevWasEmpty = true;
    //                 return;
    //             }
    
    //             // Check for headers (starts with ###)
    //             if (trimmedLine.startsWith('###')) {
    //                 components.push(
    //                     <Text key={index} style={styles.headerText}>
    //                         {trimmedLine.replace(/###\s*/, '')}
    //                     </Text>
    //                 );
    //             } else {
    //                 // Add extra margin if there was a double line break
    //                 const style = prevWasEmpty ? { ...styles.text, ...styles.sectionBreak } : styles.text;
    //                 components.push(
    //                     <Text key={index} style={style}>
    //                         {trimmedLine.replace(/\*\*/g, '')}
    //                     </Text>
    //                 );
    //             }
    //             prevWasEmpty = false;
    //         });
    
    //         return components;
    //     };
    
    //     return (
    //         <Document>
    //             <Page size="A4" style={styles.page}>
    //                 {formatText(templateText)}
    //             </Page>
    //         </Document>
    //     );
    // };
    
    // const PDFButton = ({ templateText, templateName }) => {
    //     const handleDownload = async () => {
    //         const doc = <PDFDocument templateText={templateText} />;
    //         const blob = await pdf(doc).toBlob();
    //         const url = URL.createObjectURL(blob);
    //         const link = document.createElement('a');
    //         link.href = url;
    //         link.download = `${templateName || 'Template'}.pdf`;
    //         link.click();
    //         URL.revokeObjectURL(url);
    //     };
    
    //     return (
    //         <button className="template-view-button" onClick={handleDownload}>
    //             Download PDF
    //         </button>
    //     );
    // };
    
    // const PrintButton = ({ templateText }) => {
    //     const handlePrint = async () => {
    //         const doc = <PDFDocument templateText={templateText} />;
    //         const blob = await pdf(doc).toBlob();
    //         const url = URL.createObjectURL(blob);
    
    //         const printWindow = window.open(url, '_blank');
    //         printWindow.onload = () => {
    //             printWindow.print();
    //             printWindow.onafterprint = () => {
    //                 printWindow.close();
    //                 URL.revokeObjectURL(url);
    //             };
    //         };
    //     };
    
    //     return (
    //         <button className="template-view-button" onClick={handlePrint}>
    //             Print Template
    //         </button>
    //     );
    // };
    
    // const formatMessage = (content) => {
    //     const lines = content.split('\n');
    //     const firstNonEmptyLineIndex = lines.findIndex(line => line.trim().length > 0);
    
    //     if (firstNonEmptyLineIndex !== -1) {
    //         const titleLine = lines[firstNonEmptyLineIndex].trim();
    //         lines[firstNonEmptyLineIndex] = titleLine;
    //     }
    
    //     return lines.join('\n')
    //         .replace(/###\s*(.*?)(?:\n|$)/g, '<h3><strong>$1</strong></h3>')
    //         .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    // };
    
    // const cleanMarkdown = (text) => {
    //     return text
    //         .replace(/###\s*/g, '')
    //         .replace(/\*\*/g, '');
    // };
    
    // const Templates = () => {
    //     const { user, isAuthenticated } = useAuth0();
    //     const [templates, setTemplates] = useState([]);
    //     const [selectedTemplate, setSelectedTemplate] = useState(null);
    //     const [editingTemplate, setEditingTemplate] = useState(() => {
    //         const saved = localStorage.getItem('editingTemplate');
    //         return saved ? JSON.parse(saved) : null;
    //     });
    //     const [error, setError] = useState(null);
    //     const [searchTerm, setSearchTerm] = useState('');
    //     const [isLoadingTemplates, setIsLoadingTemplates] = useState(true);
    //     const [copyButtonText, setCopyButtonText] = useState('Copy to Clipboard');
    //     const initialValue = [
    //         {
    //             type: 'paragraph',
    //             children: [{ text: '' }],
    //         },
    //     ];
    //     const [editor] = useState(() => {
    //         const e = withHistory(withReact(createEditor()));
    
    //         // Simplify the normalization
    //         const { normalizeNode } = e;
    //         e.normalizeNode = ([node, path]) => {
    //             if (path.length === 0) {
    //                 if (!node.children?.length) {
    //                     Transforms.insertNodes(
    //                         e,
    //                         { type: 'paragraph', children: [{ text: '' }] },
    //                         { at: [0] }
    //                     );
    //                 }
    //             }
    //             normalizeNode([node, path]);
    //         };
    //         return e;
    //     });
    
    //     useEffect(() => {
    //         if (isAuthenticated && user) {
    //             fetchTemplates();
    //         }
    //     }, [isAuthenticated, user]);
    
    //     useEffect(() => {
    //         if (editingTemplate) {
    //             localStorage.setItem('editingTemplate', JSON.stringify(editingTemplate));
    //         } else {
    //             localStorage.removeItem('editingTemplate');
    //         }
    //     }, [editingTemplate]);
    
    //     const fetchTemplates = async () => {
    //         try {
    //             setIsLoadingTemplates(true);
    
    //             // First get the user ID
    //             const { data: userData, error: userError } = await supabase
    //                 .from('users')
    //                 .select('id')
    //                 .eq('auth0_user_id', user.sub)
    //                 .single();
    
    //             if (userError) throw userError;
    
    //             // Then fetch templates
    //             const { data, error } = await supabase
    //                 .from('templates')
    //                 .select('*')
    //                 .eq('user_id', userData.id)
    //                 .order('created_at', { ascending: false });
    
    //             if (error) throw error;
    //             setTemplates(data || []);
    //         } catch (error) {
    //             console.error('Error fetching templates:', error);
    //             setError("Failed to fetch templates");
    //         } finally {
    //             setIsLoadingTemplates(false);
    //         }
    //     };
    
    //     const handleCreateNew = () => {
    //         const newTemplate = {
    //             id: 'new',
    //             template_name: '',
    //             template_text: ''
    //         };
    //         setSelectedTemplate(newTemplate);
    //         setEditingTemplate(newTemplate);
    //     };
    
    //     const handleSave = async () => {
    //         try {
    //             if (!user?.sub) {
    //                 throw new Error('User not authenticated');
    //             }
    
    //             if (!editingTemplate?.template_name || !editingTemplate?.template_text) {
    //                 throw new Error('Template name and content are required');
    //             }
    
    //             const { data: userData, error: userError } = await supabase
    //                 .from('users')
    //                 .select('id')
    //                 .eq('auth0_user_id', user.sub)
    //                 .single();
    
    //             if (userError || !userData?.id) {
    //                 throw new Error('User not found');
    //             }
    
    //             // Save the template
    //             const saveResult = editingTemplate.id === 'new' || !editingTemplate.id
    //                 ? await handleNewTemplateSave(userData.id)
    //                 : await handleExistingTemplateSave(userData.id);
    
    //             if (!saveResult) {
    //                 throw new Error('Failed to save template');
    //             }
    
    //             // Reset states
    //             editor.children = [{ type: 'paragraph', children: [{ text: '' }] }];
    //             Transforms.deselect(editor);
    //             setEditingTemplate(null);
    
    //             // Update templates list
    //             setTemplates(prev =>
    //                 editingTemplate.id === 'new' || !editingTemplate.id
    //                     ? [saveResult, ...prev]
    //                     : prev.map(t => t.id === editingTemplate.id ? saveResult : t)
    //             );
    //             setSelectedTemplate(saveResult);
    
    //         } catch (error) {
    //             console.error('Error saving template:', error);
    //             setError(error.message || "Failed to save template");
    //         }
    //     };
    
    //     const handleNewTemplateSave = async (userId) => {
    //         if (!userId) throw new Error('User ID is required');
    
    //         const { data, error } = await supabase
    //             .from('templates')
    //             .insert([{
    //                 user_id: userId,
    //                 template_name: editingTemplate.template_name,
    //                 template_text: editingTemplate.template_text
    //             }])
    //             .select()
    //             .single();
    
    //         if (error) throw error;
    //         return data;
    //     };
    
    //     const handleExistingTemplateSave = async (userId) => {
    //         if (!userId) throw new Error('User ID is required');
    //         if (!editingTemplate?.id) throw new Error('Template ID is required');
    
    //         const { data, error } = await supabase
    //             .from('templates')
    //             .update({
    //                 template_name: editingTemplate.template_name,
    //                 template_text: editingTemplate.template_text
    //             })
    //             .eq('id', editingTemplate.id)
    //             .eq('user_id', userId)
    //             .select()
    //             .single();
    
    //         if (error) throw error;
    //         return data;
    //     };
    
    //     const handleDelete = async (id) => {
    //         // Add confirmation dialog
    //         if (!window.confirm('Are you sure you want to delete this template? This action cannot be undone.')) {
    //             return;
    //         }
    
    //         try {
    //             const { error } = await supabase
    //                 .from('templates')
    //                 .delete()
    //                 .eq('id', id);
    
    //             if (error) throw error;
    //             setTemplates(templates.filter(t => t.id !== id));
    //             setSelectedTemplate(null);
    //             setEditingTemplate(null);
    //         } catch (error) {
    //             setError("Failed to delete template");
    //             console.error(error);
    //         }
    //     };
    
    //     const copyToClipboard = async () => {
    //         try {
    //             // Get both plain text and HTML versions
    //             const plainText = selectedTemplate.template_text.split('\n')
    //                 .map(line => line.trim())
    //                 .join('\n');
    
    //             const formattedHtml = formatMessage(selectedTemplate.template_text);
    //             const wrappedHtml = `
    //                 <div style="font-family: Arial, sans-serif; line-height: 1.5; color: black; white-space: pre-wrap; padding: 0; margin: 0;">
    //                     ${formattedHtml}
    //                 </div>`;
    
    //             const clipboardItem = new ClipboardItem({
    //                 'text/html': new Blob([wrappedHtml], { type: 'text/html' }),
    //                 'text/plain': new Blob([plainText], { type: 'text/plain' })
    //             });
    
    //             await navigator.clipboard.write([clipboardItem]);
    //             setCopyButtonText('Copied!');
    //             setTimeout(() => setCopyButtonText('Copy to Clipboard'), 2000);
    //         } catch (err) {
    //             // Fallback for browsers that don't support clipboard.write
    //             try {
    //                 await navigator.clipboard.writeText(selectedTemplate.template_text);
    //                 setCopyButtonText('Copied!');
    //                 setTimeout(() => setCopyButtonText('Copy to Clipboard'), 2000);
    //             } catch (error) {
    //                 console.error('Failed to copy:', error);
    //             }
    //         }
    //     };
    
    //     const handleCancel = () => {
    //         if (window.confirm('Are you sure you want to discard your changes?')) {
    //             setEditingTemplate(null);
    //         }
    //     };
    
    //     const filteredTemplates = templates.filter(template =>
    //         template.template_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    //         template.template_text.toLowerCase().includes(searchTerm.toLowerCase())
    //     );
    
    //     const deserializeToSlate = text => {
    //         if (!text) return [{ type: 'paragraph', children: [{ text: '' }] }];
    
    //         return text.split('\n').map(line => ({
    //             type: 'paragraph',
    //             children: [{ text: line }]
    //         }));
    //     };
    
    //     const serializeToString = nodes => {
    //         return nodes.map(node => {
    //             if (node.type === 'header') {
    //                 return `### ${Node.string(node)}`;
    //             }
    
    //             if (node.type === 'numbered-list') {
    //                 return `1. ${Node.string(node)}`;
    //             }
    
    //             if (node.type === 'bulleted-list') {
    //                 return `- ${Node.string(node)}`;
    //             }
    
    //             // Handle paragraphs with bold text
    //             if (node.type === 'paragraph') {
    //                 let text = '';
    //                 node.children.forEach(child => {
    //                     if (child.bold) {
    //                         text += `**${child.text}**`;
    //                     } else {
    //                         text += child.text;
    //                     }
    //                 });
    //                 return text;
    //             }
    
    //             return Node.string(node);
    //         }).join('\n');
    //     };
    
    //     const renderElement = props => {
    //         switch (props.element.type) {
    //             case 'header':
    //                 return <h3 {...props.attributes}>{props.children}</h3>;
    //             case 'numbered-list':
    //                 return <div {...props.attributes} style={{ paddingLeft: '20px' }}>{props.children}</div>;
    //             case 'bulleted-list':
    //                 return (
    //                     <div {...props.attributes} style={{ paddingLeft: '20px', position: 'relative' }}>
    //                         <span style={{ position: 'absolute', left: '0' }}>•</span>
    //                         {props.children}
    //                     </div>
    //                 );
    //             default:
    //                 return <div {...props.attributes}>{props.children}</div>;
    //         }
    //     };
    
    //     const renderLeaf = props => {
    //         if (props.leaf.bold) {
    //             return <strong {...props.attributes}>{props.children}</strong>;
    //         }
    //         return <span {...props.attributes}>{props.children}</span>;
    //     };
    
    //     // Update the handlePaste function
    //     const handlePaste = (event) => {
    //         event.preventDefault();
    //         const text = event.clipboardData.getData('text/plain');
    
    //         // Convert pasted text to Slate nodes
    //         const nodes = deserializeToSlate(text);
    
    //         // Get the current selection
    //         const currentPath = editor.selection?.anchor.path || [0];
    
    //         // Insert at the current selection or at the end if no selection
    //         try {
    //             Transforms.insertNodes(editor, nodes, { at: currentPath });
    //         } catch (error) {
    //             // Fallback: insert at the end
    //             Transforms.insertNodes(editor, nodes, { at: [editor.children.length] });
    //         }
    //     };
    
    //     // Update the handleEditTemplate function
    //     const handleEditTemplate = (template) => {
    //         try {
    //             const initialNodes = deserializeToSlate(template.template_text);
    //             editor.children = initialNodes;
    //             setEditingTemplate({ ...template });
    //         } catch (error) {
    //             console.error('Error setting up editor:', error);
    //             setError("Failed to edit template");
    //         }
    //     };
    
    //     return (
    //         <div className="templates">
    //             <div className="templates-header">
    //                 <h2>My Templates</h2>
    //                 <button className="create-button" onClick={handleCreateNew}>
    //                     <FaPlus /> Create New Template
    //                 </button>
    //             </div>
    
    //             <div className="search-container">
    //                 <input
    //                     type="text"
    //                     placeholder="Search templates..."
    //                     value={searchTerm}
    //                     onChange={(e) => setSearchTerm(e.target.value)}
    //                     className="search-input"
    //                 />
    //             </div>
    
    //             <div className="templates-container">
    //                 <div className="templates-list">
    //                     {filteredTemplates.map(template => (
    //                         <div
    //                             key={template.id}
    //                             className={`template-item ${selectedTemplate?.id === template.id ? 'selected' : ''}`}
    //                             onClick={() => setSelectedTemplate(template)}
    //                         >
    //                             <div className="template-name">{template.template_name}</div>
    //                             <div className="template-actions">
    //                                 <button
    //                                     className="edit-button"
    //                                     onClick={(e) => {
    //                                         e.stopPropagation();
    //                                         handleEditTemplate(template);
    //                                     }}
    //                                 >
    //                                     <FaEdit />
    //                                 </button>
    //                                 <button
    //                                     className="delete-button"
    //                                     onClick={(e) => {
    //                                         e.stopPropagation();
    //                                         handleDelete(template.id);
    //                                     }}
    //                                 >
    //                                     <FaTimes />
    //                                 </button>
    //                             </div>
    //                         </div>
    //                     ))}
    //                 </div>
    
    //                 <div className="template-content">
    //                     {selectedTemplate ? (
    //                         <div className="template-view">
    //                             {editingTemplate?.id === selectedTemplate.id ? (
    //                                 <input
    //                                     type="text"
    //                                     value={editingTemplate.template_name || ''}
    //                                     onChange={(e) => setEditingTemplate({
    //                                         ...editingTemplate,
    //                                         template_name: e.target.value
    //                                     })}
    //                                     className="template-name-input"
    //                                     style={{
    //                                         fontSize: '1.17em',
    //                                         fontWeight: 'bold',
    //                                         marginBottom: '10px',
    //                                         padding: '5px',
    //                                         width: '100%',
    //                                         placeholder: 'Enter template name'
    //                                     }}
    //                                 />
    //                             ) : (
    //                                 <h3>{selectedTemplate.template_name}</h3>
    //                             )}
    //                             <div className="template-actions">
    //                                 {editingTemplate?.id === selectedTemplate.id ? (
    //                                     <>
    //                                         <button onClick={handleSave}>Save</button>
    //                                         <button onClick={handleCancel}>Cancel</button>
    //                                     </>
    //                                 ) : (
    //                                     <>
    //                                         <button
    //                                             className="edit-button"
    //                                             onClick={() => handleEditTemplate(selectedTemplate)}
    //                                         >
    //                                             Edit
    //                                         </button>
    //                                         <button className="template-view-button" onClick={copyToClipboard}>
    //                                             {copyButtonText}
    //                                         </button>
    //                                         <PDFButton templateText={selectedTemplate.template_text} templateName={selectedTemplate.template_name} />
    //                                         <PrintButton templateText={selectedTemplate.template_text} />
    //                                     </>
    //                                 )}
    //                             </div>
    //                             <div className="template-text">
    //                                 {editingTemplate?.id === selectedTemplate.id ? (
    //                                     <Slate
    //                                         editor={editor}
    //                                         initialValue={[{ type: 'paragraph', children: [{ text: editingTemplate.template_text || '' }] }]}
    //                                         onChange={value => {
    //                                             const text = value.map(n => Node.string(n)).join('\n');
    //                                             setEditingTemplate(prev => ({
    //                                                 ...prev,
    //                                                 template_text: text
    //                                             }));
    //                                         }}
    //                                     >
    //                                         <Editable
    //                                             style={{
    //                                                 minHeight: '100%',
    //                                                 padding: '20px',
    //                                                 whiteSpace: 'pre-wrap',
    //                                                 color: '#202124',
    //                                                 lineHeight: '1.6',
    //                                                 fontFamily: "'Google Sans', Roboto, sans-serif",
    //                                                 fontSize: '14px'
    //                                             }}
    //                                         />
    //                                     </Slate>
    //                                 ) : (
    //                                     <div className="template-content"
    //                                         style={{
    //                                             whiteSpace: 'pre-wrap',
    //                                             padding: '20px',
    //                                             color: '#202124',
    //                                             lineHeight: '1.6',
    //                                             fontFamily: "'Google Sans', Roboto, sans-serif",
    //                                             fontSize: '14px'
    //                                         }}
    //                                         dangerouslySetInnerHTML={{ __html: formatMessage(selectedTemplate.template_text) }}
    //                                     />
    //                                 )}
    //                             </div>
    //                         </div>
    //                     ) : (
    //                         <div className="no-selection">
    //                             Select a template or create a new one
    //                         </div>
    //                     )}
    //                 </div>
    //             </div>
    
    //             {error && (
    //                 <div className="error-message">
    //                     {error}
    //                     <button onClick={() => setError(null)}>×</button>
    //                 </div>
    //             )}
    //         </div>
    //     );
    // };
    
    // export default Templates;
